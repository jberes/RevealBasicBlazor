@page "/"
@page "/viewer"

@using Models.AcmeAnalytics
@using Reveal.Sdk.Dom
@inject IJSRuntime JSRuntime

<div class="row-layout viewer-container">
    <div class="column-layout group">

        <button @onclick="ClickButton">New Dashboard</button>

        <IgbList class="list" viewer-scope>
            @foreach (var item in _acmeAnalyticsDashboardNames)
            {
                <IgbListItem @onclick="() => ListItemClick(item)">
                    <IgbAvatar slot="start" Shape="AvatarShape.Circle" class="avatar" viewer-scope>
                        <span class="material-icons">
                            person
                        </span>
                    </IgbAvatar>
                    <div slot="title">@item.DashboardTitle</div>
                    <span slot="end" class="material-icons icon">
                        star
                    </span>
                </IgbListItem>
            }
        </IgbList>
    </div>
    <div class="column-layout group_1">
        <div id="revealView" style="height: calc(100vh - 100px); width: 100%; position:relative;"></div>
    </div>
</div>

@code {
    private string? _selectedDashboard;
    private List<DashboardNames> _acmeAnalyticsDashboardNames = new();

    public async void ListItemClick(DashboardNames item)
    {
        _selectedDashboard = item.DashboardFileName;
        await JSRuntime.InvokeVoidAsync("loadRevealView", "revealView", _selectedDashboard);
    }

    private async Task ClickButton()
    {
        await JSRuntime.InvokeVoidAsync("loadRevealView", "revealView", "");
    }

    protected override void OnInitialized()
    {
        var dashboardFolder = Path.Combine(Environment.CurrentDirectory, "Dashboards");
        if (Directory.Exists(dashboardFolder))
        {
            var files = Directory.GetFiles(dashboardFolder, "*.rdash");
            foreach (var file in files)
            {
                try
                {
                    var dashboardTitle = RdashDocument.Load(file).Title; // Load the title from the file
                    var fullFileName = Path.GetFileName(file); // Get the full file name with extension

                    _acmeAnalyticsDashboardNames.Add(new DashboardNames
                        {
                            DashboardTitle = dashboardTitle,
                            DashboardFileName = fullFileName
                        });
                }
                catch (Exception ex)
                {                    
                    Console.WriteLine($"Error processing file '{file}': {ex.Message}");
                }
            }
        }

    }
}
